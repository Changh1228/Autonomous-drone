#!/usr/bin/env python

import math
import sys
import json
import numpy as np
import rospy
import tf2_ros
import tf2_geometry_msgs
from tf.transformations import euler_from_quaternion, quaternion_from_euler, quaternion_matrix, euler_from_matrix, quaternion_from_matrix
from geometry_msgs.msg import PoseStamped, TransformStamped, Vector3
from aruco_msgs.msg import MarkerArray
from crazyflie_driver.msg import Position

import copy
from collections import deque

aruco_queue = deque(maxlen = 6)

'''
solved problem in doing average of quaternion
please, no bugs
'''

def transform_callback(data):
    # update pose of aruco (camera_link)
    global aruco_queue
    aruco_queue.append(data)


def read_from_json(m):
    t = PoseStamped()
    t.header.stamp = rospy.Time.now()
    t.header.frame_id = 'map'
    t.pose.position = Vector3(*m['pose']['position'])
    roll, pitch, yaw = m['pose']['orientation']
    (t.pose.orientation.x,
     t.pose.orientation.y,
     t.pose.orientation.z,
     t.pose.orientation.w) = quaternion_from_euler(math.radians(roll),
                                                   math.radians(pitch),
                                                   math.radians(yaw))
    return t


def pre_aruco(aruco_queue):
    '''preprocess the data form camera: delete the outlier and choose nearest markers'''
    k = len(aruco_queue)
    if k < 6:  # if no enough data in queue, quit
        return PoseStamped(), -2  # return 0, -2 for localization to recognize
    # choose nearest marker
    flag = 0  # flag of rejecting low quality marker
    record = np.zeros(16)
    for data in aruco_queue: # data in same timestamp
        d = 10000
        id = None
        for aruco in data.markers:  # for all markers
            if aruco.id > 15 or aruco.id < 1:  # reject wrong id
                continue
            d_now = pow(aruco.pose.pose.position.x, 2) + pow(aruco.pose.pose.position.y, 2) + pow(aruco.pose.pose.position.z, 2)
            if d_now < 0.2 or d_now > 1.5:  # check if marker in proper distance
                flag = 1
                continue
            degree = math.atan2(aruco.pose.pose.position.x, aruco.pose.pose.position.z)
            if degree < -0.65 or degree > 0.65:  # reject the marker in the edge of pic
                flag = 1
                continue

            if d_now < d:
                d = d_now  # max distance and its ID
                id = aruco.id
        record[id] += 1

    if id == None and flag == 1:  # the only marker seen is low quality
        return PoseStamped(), -1  # return 0, 0 for localization to recognize

    nearest_ID = np.where(record==np.max(record))  # nearest Aruco ID
    nearest_ID = nearest_ID[0][0]

    # delete the outlier (largest and smallest distance)
    # and average nearest_ID
    distance = np.zeros(k)
    t = 0
    for data in aruco_queue: # data in same timestamp
        for aruco in data.markers:  # for all markers
            if aruco.id == nearest_ID:  # only care about nearest marker
                distance[t] = pow(aruco.pose.pose.position.x, 2) + pow(aruco.pose.pose.position.y, 2)
        t += 1
    largest_stamp = np.where(distance==np.max(distance))  # largest timestamp
    largest_stamp = largest_stamp[0][0]
    smallest_stamp = np.where(distance==np.min(distance))  # smallest timestamp
    smallest_stamp = smallest_stamp[0][0]

    # average
    t = 0
    p_x = []
    p_y = []
    p_z = []
    o_x = []
    o_y = []
    o_z = []
    o_w = []

    for data in aruco_queue: # data in same timestamp
        if t!=largest_stamp and t!=smallest_stamp:
            for aruco in data.markers:  # for all markers
                if aruco.id == nearest_ID:  # only care about nearest marker
                    p_x.append(aruco.pose.pose.position.x)
                    p_y.append(aruco.pose.pose.position.y)
                    p_z.append(aruco.pose.pose.position.z)
                    o_x.append(aruco.pose.pose.orientation.x)
                    o_y.append(aruco.pose.pose.orientation.y)
                    o_z.append(aruco.pose.pose.orientation.z)
                    o_w.append(aruco.pose.pose.orientation.w)

        t += 1
    mean = []
    mean.append(np.mean(p_x))
    mean.append(np.mean(p_y))
    mean.append(np.mean(p_z))
    mean.append(np.mean(o_x))
    mean.append(np.mean(o_y))
    mean.append(np.mean(o_z))
    mean.append(np.mean(o_w))

    var_p_x = np.var(p_x)
    var_p_y = np.var(p_y)
    var_o_x = np.var(o_x)
    var_o_y = np.var(o_y)
    var_o_z = np.var(o_z)
    var_o_w = np.var(o_w)
    #print(var_p_x, var_p_y, var_o_z, var_o_z)
    if  var_o_x > 0.2 or var_o_y > 0.2 or var_o_z > 0.2 or var_o_w > 0.2:
        print("bad data")
        return PoseStamped(), -3

    result = PoseStamped()
    result.header.stamp = aruco_queue[int(k/2)].header.stamp  # use time at middle stamp
    result.header.frame_id = "cf1/camera_link"
    result.pose.position.x = mean[0]
    result.pose.position.y = mean[1]
    result.pose.position.z = mean[2]
    result.pose.orientation.x = mean[3]
    result.pose.orientation.y = mean[4]
    result.pose.orientation.z = mean[5]
    result.pose.orientation.w = mean[6]

    if p_x == 0 and p_y == 0:
        print("error wtf?")
        return PoseStamped(), -4
    return result, nearest_ID


def pub_tf(x, y, oz, ow):
    tf_buf   = tf2_ros.Buffer()
    tf_lstn  = tf2_ros.TransformListener(tf_buf)

    q = math.sqrt(oz**2 + ow**2)
    oz /= q
    ow /= q
    br = tf2_ros.TransformBroadcaster()
    tfO2M = TransformStamped()
    tfO2M.header.stamp = rospy.Time.now()
    tfO2M.header.frame_id = "map"
    tfO2M.child_frame_id = "cf1/odom"
    tfO2M.transform.translation.x = x
    tfO2M.transform.translation.y = y
    tfO2M.transform.translation.z = 0.0
    tfO2M.transform.rotation.x = 0.0
    tfO2M.transform.rotation.y = 0.0
    tfO2M.transform.rotation.z = oz
    tfO2M.transform.rotation.w = ow
    br.sendTransform(tfO2M)
    (roll, pitch, yaw) = euler_from_quaternion((0.0, 0.0, oz, ow))
    print(x, y, oz, ow)


def localization(argv):

    global aruco_queue
    d_buf = None

    tf_buf   = tf2_ros.Buffer()
    tf_lstn  = tf2_ros.TransformListener(tf_buf)

    queue_len = 10  # length of tf queue
    queue = deque(maxlen = queue_len)

    # Load world JSON
    args = rospy.myargv(argv=argv)  # Let ROS filter through the arguments
    with open(args[1], 'rb') as f:
        world = json.load(f)

    # Get pose of aruco in map frame (accurate)
	aruco_map_pose = {m["id"]: read_from_json(m) for m in world['markers']}

    # save initial tf

    rate = rospy.Rate(10)  # Hz
    print('localization running')

    flag = 0  # flag for first running
    yaw_flag = 0  # flag for unusual jump
    init_flag = 20 # flag for initial jump

    while not rospy.is_shutdown():
        # deepcopy to prevent value change when preprocess
        aruco_marker, aruco_ID = pre_aruco(copy.deepcopy(aruco_queue))
        pub_flag = 0  # make sure no mutiple update of tf

        # publish initial tf
        if flag == 0:  # run localization for the first time
            if pub_flag == 0:
                trans_x = -0.5
                trans_y = -0.5
                trans_oz = 0.0
                trans_ow = 1.0
                flag = 1
                pub_flag = 1
                print("publish init tf")

        # already has a tf
        #    publih last tf
        elif (rospy.Time.now().secs - aruco_marker.header.stamp.secs) > 2:
            # data form 2s before or not in good pose(aruco_marker = PoseStamped, sec = 0)
            if pub_flag == 0:
                trans_x = trans_x
                trans_y = trans_y
                trans_oz = trans_oz
                trans_ow = trans_ow
                pub_flag = 1
                print("publish last tf (old tf or bad marker)")

        elif not tf_buf.can_transform(aruco_marker.header.frame_id, 'cf1/odom', rospy.Time(0)):
            if pub_flag == 0:
                trans_x = trans_x
                trans_y = trans_y
                trans_oz = trans_oz
                trans_ow = trans_ow
                pub_flag = 1
                print("publish last tf (no intime tf)")

        # publish a new tf
        else:
            # ---------------do localization ----------------
            # transform pose in camera link to odm link
            aruco_marker.header.stamp = rospy.Time(0)
            aruco_odm_pose = tf_buf.transform(aruco_marker, 'cf1/odom', rospy.Duration(0.1))
            # calculate the difference (true_pose detect_pose)
            quat = [aruco_map_pose[aruco_ID].pose.orientation.x,
                    aruco_map_pose[aruco_ID].pose.orientation.y,
                    aruco_map_pose[aruco_ID].pose.orientation.z,
                    aruco_map_pose[aruco_ID].pose.orientation.w]
            T_m2a = quaternion_matrix(quat)
            T_m2a[0][3] = aruco_map_pose[aruco_ID].pose.position.x
            T_m2a[1][3] = aruco_map_pose[aruco_ID].pose.position.y
            T_m2a[2][3] = aruco_map_pose[aruco_ID].pose.position.z

            quat2 = [aruco_odm_pose.pose.orientation.x,
                     aruco_odm_pose.pose.orientation.y,
                     aruco_odm_pose.pose.orientation.z,
                     aruco_odm_pose.pose.orientation.w]
            T_o2a = quaternion_matrix(quat2)
            T_o2a[0][3] = aruco_odm_pose.pose.position.x
            T_o2a[1][3] = aruco_odm_pose.pose.position.y
            T_o2a[2][3] = aruco_odm_pose.pose.position.z

            T_inv = np.linalg.inv(T_o2a)
            T_m2o = np.matmul(T_m2a, T_inv)
            position_x = T_m2o[0][3]
            position_y = T_m2o[1][3]
            position_z = T_m2o[2][3]

            T_m2o[0][3] = 0
            T_m2o[1][3] = 0
            T_m2o[2][3] = 0

            (o_x, o_y, o_z, o_w) = quaternion_from_matrix(T_m2o)

            if not d_buf: # init buf
                d_buf = [0, 0, 0, 0]  # x, y, o_x, o_w of last tf

            print(position_x, position_y, o_z, o_w, 0, 0)
            '''if (abs(d_buf[2]+o_z) < 0.2 and (d_buf[2]<0 != o_z<0) ) or (abs(d_buf[3]+o_w) < 0.2 and (d_buf[3]<0 != o_w<0)):
            # quaternion jump -+ happens
                print("too large waving")
                print(position_x, position_y, o_z, o_w)
                queue.clear()'''

            # cal time average
            queue.append([position_x, position_y, o_z, o_w])
            timeAve_x = []
            timeAve_y = []
            timeAve_oz = []
            timeAve_ow = []

            for i in queue:
                timeAve_x.append( i[0])
                timeAve_y.append( i[1])
                timeAve_oz.append(i[2])
                timeAve_ow.append(i[3])

            mean_x = np.mean(timeAve_x)
            mean_y = np.mean(timeAve_y)
            mean_oz = np.mean(timeAve_oz)
            mean_ow = np.mean(timeAve_ow)

            var_oz = np.var(timeAve_oz)
            var_ow = np.var(timeAve_ow)

            if var_oz > 0.2 or var_ow > 0.2:
                print("bad result")
                queue.clear()
                if pub_flag == 0:
                    trans_x = trans_x
                    trans_y = trans_y
                    trans_oz = trans_oz
                    trans_ow = trans_ow
                    pub_flag = 1

            # TF form odm to map
            if pub_flag == 0 and yaw_flag == 0:
                trans_x = mean_x
                trans_y = mean_y
                trans_oz = mean_oz
                trans_ow = mean_ow
                d_buf = [mean_x, mean_y, mean_oz, mean_ow]
                pub_flag = 1
                print("publish new tf")

        if pub_flag == 1: # updat a tf in this loop

            pub_tf(trans_x, trans_y, trans_oz, trans_ow)
            rate.sleep()

def main(argv=sys.argv):

    rospy.init_node('localization', anonymous=True)

    rospy.Subscriber('/aruco/markers', MarkerArray, transform_callback)

    localization(argv)


if __name__ == '__main__':
    main()
